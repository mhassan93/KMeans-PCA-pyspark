{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BDA Assignment04.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kPt5q27L5557"
      },
      "source": [
        "# K-Means & PCA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p0-YhEpP_Ds-"
      },
      "source": [
        "### Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zsj5WYpR9QId"
      },
      "source": [
        "Let's setup Spark on your Colab environment.  Run the cell below!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k-qHai2252mI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c5764a3b-681f-4880-a9ba-f76e05321d42"
      },
      "source": [
        "!pip install pyspark\n",
        "!pip install -U -q PyDrive\n",
        "!apt install openjdk-8-jdk-headless -qq\n",
        "import os\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pyspark\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f0/26/198fc8c0b98580f617cb03cb298c6056587b8f0447e20fa40c5b634ced77/pyspark-3.0.1.tar.gz (204.2MB)\n",
            "\u001b[K     |████████████████████████████████| 204.2MB 62kB/s \n",
            "\u001b[?25hCollecting py4j==0.10.9\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9e/b6/6a4fb90cd235dc8e265a6a2067f2a2c99f0d91787f06aca4bcf7c23f3f80/py4j-0.10.9-py2.py3-none-any.whl (198kB)\n",
            "\u001b[K     |████████████████████████████████| 204kB 44.9MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.0.1-py2.py3-none-any.whl size=204612242 sha256=2f9e15d68af85f7c4b82d49ddb7e8bb4b14f7bd4de2d7606f91a17627d2c40e0\n",
            "  Stored in directory: /root/.cache/pip/wheels/5e/bd/07/031766ca628adec8435bb40f0bd83bb676ce65ff4007f8e73f\n",
            "Successfully built pyspark\n",
            "Installing collected packages: py4j, pyspark\n",
            "Successfully installed py4j-0.10.9 pyspark-3.0.1\n",
            "The following additional packages will be installed:\n",
            "  openjdk-8-jre-headless\n",
            "Suggested packages:\n",
            "  openjdk-8-demo openjdk-8-source libnss-mdns fonts-dejavu-extra\n",
            "  fonts-ipafont-gothic fonts-ipafont-mincho fonts-wqy-microhei\n",
            "  fonts-wqy-zenhei fonts-indic\n",
            "The following NEW packages will be installed:\n",
            "  openjdk-8-jdk-headless openjdk-8-jre-headless\n",
            "0 upgraded, 2 newly installed, 0 to remove and 16 not upgraded.\n",
            "Need to get 36.5 MB of archives.\n",
            "After this operation, 143 MB of additional disk space will be used.\n",
            "Selecting previously unselected package openjdk-8-jre-headless:amd64.\n",
            "(Reading database ... 145483 files and directories currently installed.)\n",
            "Preparing to unpack .../openjdk-8-jre-headless_8u275-b01-0ubuntu1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jre-headless:amd64 (8u275-b01-0ubuntu1~18.04) ...\n",
            "Selecting previously unselected package openjdk-8-jdk-headless:amd64.\n",
            "Preparing to unpack .../openjdk-8-jdk-headless_8u275-b01-0ubuntu1~18.04_amd64.deb ...\n",
            "Unpacking openjdk-8-jdk-headless:amd64 (8u275-b01-0ubuntu1~18.04) ...\n",
            "Setting up openjdk-8-jre-headless:amd64 (8u275-b01-0ubuntu1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/orbd to provide /usr/bin/orbd (orbd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/servertool to provide /usr/bin/servertool (servertool) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/tnameserv to provide /usr/bin/tnameserv (tnameserv) in auto mode\n",
            "Setting up openjdk-8-jdk-headless:amd64 (8u275-b01-0ubuntu1~18.04) ...\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/idlj to provide /usr/bin/idlj (idlj) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsimport to provide /usr/bin/wsimport (wsimport) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jsadebugd to provide /usr/bin/jsadebugd (jsadebugd) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/native2ascii to provide /usr/bin/native2ascii (native2ascii) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javah to provide /usr/bin/javah (javah) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/clhsdb to provide /usr/bin/clhsdb (clhsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/xjc to provide /usr/bin/xjc (xjc) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/hsdb to provide /usr/bin/hsdb (hsdb) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/schemagen to provide /usr/bin/schemagen (schemagen) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/extcheck to provide /usr/bin/extcheck (extcheck) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jhat to provide /usr/bin/jhat (jhat) in auto mode\n",
            "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsgen to provide /usr/bin/wsgen (wsgen) in auto mode\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qwtlO4_m_LbQ"
      },
      "source": [
        "Now we import some of the libraries usually needed by our workload.\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "twk-K-jilWK7"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "import pyspark\n",
        "from pyspark.sql import *\n",
        "from pyspark.sql.types import *\n",
        "from pyspark.sql.functions import *\n",
        "from pyspark import SparkContext, SparkConf"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BtrJlMBt1Ela"
      },
      "source": [
        "Let's initialize the Spark context."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vm3sAVeK1EDZ"
      },
      "source": [
        "# create the session\n",
        "conf = SparkConf().set(\"spark.ui.port\", \"4050\")\n",
        "\n",
        "# create the context\n",
        "sc = pyspark.SparkContext(conf=conf)\n",
        "spark = SparkSession.builder.getOrCreate()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YqovskkH1DmC"
      },
      "source": [
        "You can easily check the current version and get the link of the web interface. In the Spark UI, you can monitor the progress of your job and debug the performance bottlenecks (if your Colab is running with a **local runtime**)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DueQggJc1DDk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "outputId": "705cdf2f-1e8a-4b70-ed43-953d172fa585"
      },
      "source": [
        "spark"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "            <div>\n",
              "                <p><b>SparkSession - in-memory</b></p>\n",
              "                \n",
              "        <div>\n",
              "            <p><b>SparkContext</b></p>\n",
              "\n",
              "            <p><a href=\"http://7c28addcc597:4050\">Spark UI</a></p>\n",
              "\n",
              "            <dl>\n",
              "              <dt>Version</dt>\n",
              "                <dd><code>v3.0.1</code></dd>\n",
              "              <dt>Master</dt>\n",
              "                <dd><code>local[*]</code></dd>\n",
              "              <dt>AppName</dt>\n",
              "                <dd><code>pyspark-shell</code></dd>\n",
              "            </dl>\n",
              "        </div>\n",
              "        \n",
              "            </div>\n",
              "        "
            ],
            "text/plain": [
              "<pyspark.sql.session.SparkSession at 0x7f0831dff198>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kAYRX2PMm0L6"
      },
      "source": [
        "### Data Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7hXdMR6wnEIM"
      },
      "source": [
        "In this Colab, rather than downloading a file from Google Drive, we will load a famous machine learning dataset, the [Breast Cancer Wisconsin dataset](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html), using the ```scikit-learn``` datasets loader."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5K93ABEy9Zlo"
      },
      "source": [
        "from sklearn.datasets import load_breast_cancer\n",
        "breast_cancer = load_breast_cancer()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wpsaYOqRxar2"
      },
      "source": [
        "For convenience, given that the dataset is small, we first construct a Pandas dataframe, tune the schema, and then convert it into a Spark dataframe."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Oitav_xhQD9w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d360e0b3-fb0a-4ffb-d92f-8b4b0ebf46be"
      },
      "source": [
        "pd_df = pd.DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)\n",
        "df = spark.createDataFrame(pd_df)\n",
        "\n",
        "def set_df_columns_nullable(spark, df, column_list, nullable=False):\n",
        "    for struct_field in df.schema:\n",
        "        if struct_field.name in column_list:\n",
        "            struct_field.nullable = nullable\n",
        "    df_mod = spark.createDataFrame(df.rdd, df.schema)\n",
        "    return df_mod\n",
        "\n",
        "df = set_df_columns_nullable(spark, df, df.columns)\n",
        "df = df.withColumn('features', array(df.columns))\n",
        "vectors = df.rdd.map(lambda row: Vectors.dense(row.features))\n",
        "\n",
        "df.printSchema()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "root\n",
            " |-- mean radius: double (nullable = false)\n",
            " |-- mean texture: double (nullable = false)\n",
            " |-- mean perimeter: double (nullable = false)\n",
            " |-- mean area: double (nullable = false)\n",
            " |-- mean smoothness: double (nullable = false)\n",
            " |-- mean compactness: double (nullable = false)\n",
            " |-- mean concavity: double (nullable = false)\n",
            " |-- mean concave points: double (nullable = false)\n",
            " |-- mean symmetry: double (nullable = false)\n",
            " |-- mean fractal dimension: double (nullable = false)\n",
            " |-- radius error: double (nullable = false)\n",
            " |-- texture error: double (nullable = false)\n",
            " |-- perimeter error: double (nullable = false)\n",
            " |-- area error: double (nullable = false)\n",
            " |-- smoothness error: double (nullable = false)\n",
            " |-- compactness error: double (nullable = false)\n",
            " |-- concavity error: double (nullable = false)\n",
            " |-- concave points error: double (nullable = false)\n",
            " |-- symmetry error: double (nullable = false)\n",
            " |-- fractal dimension error: double (nullable = false)\n",
            " |-- worst radius: double (nullable = false)\n",
            " |-- worst texture: double (nullable = false)\n",
            " |-- worst perimeter: double (nullable = false)\n",
            " |-- worst area: double (nullable = false)\n",
            " |-- worst smoothness: double (nullable = false)\n",
            " |-- worst compactness: double (nullable = false)\n",
            " |-- worst concavity: double (nullable = false)\n",
            " |-- worst concave points: double (nullable = false)\n",
            " |-- worst symmetry: double (nullable = false)\n",
            " |-- worst fractal dimension: double (nullable = false)\n",
            " |-- features: array (nullable = false)\n",
            " |    |-- element: double (containsNull = false)\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TtR1xRvonxiO"
      },
      "source": [
        "With the next cell, we build the two datastructures that we will be using throughout this Colab:\n",
        "\n",
        "\n",
        "*   ```features```, a dataframe of Dense vectors, containing all the original features in the dataset;\n",
        "*   ```labels```, a series of binary labels indicating if the corresponding set of features belongs to a subject with breast cancer, or not.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GP23Xkgwi0SD"
      },
      "source": [
        "from pyspark.ml.linalg import Vectors\n",
        "features = spark.createDataFrame(vectors.map(Row), [\"features\"])\n",
        "labels = pd.Series(breast_cancer.target)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QrS41E2tkVYb"
      },
      "source": [
        "#**KMeans on Original Features:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ebLNUxP0_8x3"
      },
      "source": [
        "\n",
        "\n",
        "If you run successfully the Setup and Data Preprocessing stages, you are now ready to cluster the data with the [K-means](https://spark.apache.org/docs/latest/ml-clustering.html) algorithm included in MLlib (Spark's Machine Learning library).\n",
        "Set the ```k``` parameter, fit the model, and the compute the [Silhouette score](https://en.wikipedia.org/wiki/Silhouette_(clustering)) (i.e., a measure of quality of the obtained clustering).  \n",
        "\n",
        "**IMPORTANT:** use the MLlib implementation of the Silhouette score (via ```ClusteringEvaluator```)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0xVIfPHZwWaE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6174aa09-3a00-4fdb-ec73-ea4a8b215f37"
      },
      "source": [
        "# Applying KMeans on actual features\n",
        "from pyspark.ml.clustering import KMeans\n",
        "from pyspark.ml.evaluation import ClusteringEvaluator\n",
        "\n",
        "# Trains a k-means model.\n",
        "kmeans = KMeans().setK(2).setSeed(1)\n",
        "model = kmeans.fit(features)\n",
        "\n",
        "predictions = model.transform(features)\n",
        "\n",
        "# Evaluate clustering by computing Silhouette score\n",
        "evaluator = ClusteringEvaluator()\n",
        "\n",
        "silhouette = evaluator.evaluate(predictions)\n",
        "print(\"Silhouette with squared euclidean distance = \" + str(silhouette))\n",
        "\n",
        "# showing the predicted centers\n",
        "centers = model.clusterCenters()\n",
        "centers"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Silhouette with squared euclidean distance = 0.8342904262826145\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[array([1.25562991e+01, 1.85703653e+01, 8.11234703e+01, 4.96061872e+02,\n",
              "        9.48844977e-02, 9.10998174e-02, 6.24377642e-02, 3.34325434e-02,\n",
              "        1.78057991e-01, 6.34540183e-02, 3.04190868e-01, 1.21515320e+00,\n",
              "        2.15288059e+00, 2.37852922e+01, 7.17326256e-03, 2.34746895e-02,\n",
              "        2.87455128e-02, 1.06363242e-02, 2.06135799e-02, 3.74750297e-03,\n",
              "        1.40439018e+01, 2.47095434e+01, 9.19375114e+01, 6.19647945e+02,\n",
              "        1.29959110e-01, 2.23311758e-01, 2.19214947e-01, 9.13298425e-02,\n",
              "        2.83553653e-01, 8.32819406e-02]),\n",
              " array([1.93799237e+01, 2.16945802e+01, 1.28231298e+02, 1.18592977e+03,\n",
              "        1.01294580e-01, 1.48612977e-01, 1.76939466e-01, 1.00698779e-01,\n",
              "        1.91539695e-01, 6.06029008e-02, 7.42803817e-01, 1.22253817e+00,\n",
              "        5.25058015e+00, 9.56781679e+01, 6.59868702e-03, 3.21766947e-02,\n",
              "        4.24197710e-02, 1.56739847e-02, 2.03039695e-02, 3.95338931e-03,\n",
              "        2.37094656e+01, 2.89126718e+01, 1.58496183e+02, 1.75302290e+03,\n",
              "        1.40424733e-01, 3.57757710e-01, 4.49306107e-01, 1.92431069e-01,\n",
              "        3.11881679e-01, 8.61654962e-02])]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1w6B376ElyKn"
      },
      "source": [
        "#**Finding WSS using builtin and custom method:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TgOGnorwl3FO"
      },
      "source": [
        "Computing the within cluster sum of squares (WSS) using custom method in Spark. Note that the score can be be obtained using the `summary.trainingCost` method of the fitted kmeans model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v95ngZOOl3nE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8197e7e7-ffb9-4bd4-8ecf-e59828b6639a"
      },
      "source": [
        "# getting actual WSSE cost\n",
        "print(\"actual \",model.summary.trainingCost)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "actual  77943099.87829885\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dCdfxibWESJz"
      },
      "source": [
        "# custom function to calculate WSSE\n",
        "def calculate_WSSE(feats, preds):\n",
        "  errlst = []\n",
        "  for feat, lbl in zip(feats, preds):\n",
        "    if lbl == 0:\n",
        "      errlst.append(np.sum((feat-centers[0])**2))\n",
        "    else:\n",
        "      errlst.append(np.sum((feat-centers[1])**2))\n",
        "  return np.sum(errlst)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UdAT6zkhNd1C",
        "outputId": "07d9cae2-cbc7-4ed9-d366-6a7ad83adeb7"
      },
      "source": [
        "# getting features and predictions array in order to iterate for calculating WSSE\n",
        "feat_arr = predictions.select(predictions.features).collect()\n",
        "preds = predictions.select(predictions.prediction).collect()\n",
        "\n",
        "WSSE = calculate_WSSE(feat_arr, preds)\n",
        "print(\"Within Cluster Sum of Squared Error = \" + str(WSSE))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Within Cluster Sum of Squared Error = 854276901.2461549\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P0d1WIdIkael"
      },
      "source": [
        "#**Checking Correctly Classified Samples:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5GB09n7sqTO6"
      },
      "source": [
        "**Take** the predictions produced by K-means, and compare them with the ```labels``` variable (i.e., the ground truth from our dataset).  \n",
        "\n",
        "Compute how many data points in the dataset have been clustered correctly (i.e., positive cases in one cluster, negative cases in the other).\n",
        "\n",
        "*HINT*: you can use ```np.count_nonzero(series_a == series_b)``` to quickly compute the element-wise comparison of two series.\n",
        "\n",
        "**IMPORTANT**: K-means is a clustering algorithm, so it will not output a label for each data point, but just a cluster identifier!  As such, label ```0``` does not necessarily match the cluster identifier ```0```.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ueLIShY0gzpX",
        "outputId": "d88bf684-a7bc-4e47-a8e8-5600d7a14869"
      },
      "source": [
        "# checking if cluster identifier and labels are the same or not\n",
        "print(labels[0])\n",
        "df.show(n =1)\n",
        "predictions.show(n=1, truncate = False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\n",
n",
            "|mean radius|mean texture|mean perimeter|mean area|mean smoothness|mean compactness|mean concavity|mean concave points|mean symmetry|mean fractal dimension|radius error|texture error|perimeter error|area error|smoothness error|compactness error|concavity error|concave points error|symmetry error|fractal dimension error|worst radius|worst texture|worst perimeter|worst area|worst smoothness|worst compactness|worst concavity|worst concave points|worst symmetry|worst fractal dimension|            features|\n",
            "+-----------+------------+--------------+---------+---------------+----------------+--------------+-------------------+-------------+----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+--------------------+\n",
            "|      17.99|       10.38|         122.8|   1001.0|         0.1184|          0.2776|        0.3001|             0.1471|       0.2419|               0.07871|       1.095|       0.9053|          8.589|     153.4|        0.006399|          0.04904|        0.05373|             0.01587|       0.03003|               0.006193|       25.38|        17.33|          184.6|    2019.0|          0.1622|           0.6656|         0.7119|              0.2654|        0.4601|                 0.1189|[17.99, 10.38, 12...|\n",
n",
            "only showing top 1 row\n",
            "\n",
            "+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------+\n",
            "|features                                                                                                                                                                                                           |prediction|\n",
            "+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------+\n",
            "|[17.99,10.38,122.8,1001.0,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019.0,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189]|1         |\n",
            "+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------+\n",
            "only showing top 1 row\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5H3uWJjBwKz3",
        "outputId": "3f20e128-38ac-488c-924a-1cf8812d5bdc"
      },
      "source": [
        "cluster_df = predictions.toPandas()    \n",
        "cluster_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>features</th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[17.99, 10.38, 122.8, 1001.0, 0.1184, 0.2776, ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[20.57, 17.77, 132.9, 1326.0, 0.08474, 0.07864...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[19.69, 21.25, 130.0, 1203.0, 0.1096, 0.1599, ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[11.42, 20.38, 77.58, 386.1, 0.1425, 0.2839, 0...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[20.29, 14.34, 135.1, 1297.0, 0.1003, 0.1328, ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                            features  prediction\n",
              "0  [17.99, 10.38, 122.8, 1001.0, 0.1184, 0.2776, ...           1\n",
              "1  [20.57, 17.77, 132.9, 1326.0, 0.08474, 0.07864...           1\n",
              "2  [19.69, 21.25, 130.0, 1203.0, 0.1096, 0.1599, ...           1\n",
              "3  [11.42, 20.38, 77.58, 386.1, 0.1425, 0.2839, 0...           0\n",
              "4  [20.29, 14.34, 135.1, 1297.0, 0.1003, 0.1328, ...           1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MC4fiQKyNl0a"
      },
      "source": [
        "\n",
        "---\n",
        "the above output shows that predicted cluster labels are flipped, i.e cluster 1 is label 0 and cluster 0 is label 1\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mz5Nv57gsRET",
        "outputId": "3d4509e5-0823-4260-a31c-d2904017bf4b"
      },
      "source": [
        "np.count_nonzero(labels!=cluster_df.prediction)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "486"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6NuATuqVkokQ"
      },
      "source": [
        "#**Applying PCA on the data:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fLIprM1JsdTU"
      },
      "source": [
        "Now perform dimensionality reduction on the ```features``` using the [PCA](https://spark.apache.org/docs/latest/ml-features.html#pca) statistical procedure, available as well in MLlib.\n",
        "\n",
        "Set the ```k``` parameter to **2**, effectively reducing the dataset size of a **15X** factor."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p4J8JMDkSb24",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "71fa786f-6e26-4350-d84c-e52cd43327ba"
      },
      "source": [
        "# applying PCA on actual features\n",
        "from pyspark.ml.feature import PCA\n",
        "from pyspark.ml.linalg import Vectors\n",
        "\n",
        "pca = PCA(k=2, inputCol=\"features\", outputCol=\"pcaFeatures\")\n",
        "pca_model = pca.fit(features)\n",
        "\n",
        "pca_features = pca_model.transform(features).select(\"pcaFeatures\")\n",
        "\n",
        "# renaming the column features (needed for kmeans.fit)\n",
        "pca_features = pca_features.selectExpr(\"pcaFeatures as features\")\n",
        "pca_features.show(truncate=False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+-----------------------------------------+\n",
            "|features                                 |\n",
            "+-----------------------------------------+\n",
            "|[-2260.0138862925405,-187.9603012226368] |\n",
            "|[-2368.993755782054,121.58742425815508]  |\n",
            "|[-2095.6652015478608,145.11398565870087] |\n",
            "|[-692.6905100570508,38.576922592081765]  |\n",
            "|[-2030.2124927427062,295.2979839927924]  |\n",
            "|[-888.280053576076,26.079796157025726]   |\n",
            "|[-1921.082212474845,58.807572473099206]  |\n",
            "|[-1074.7813350047961,31.771227808469668] |\n",
            "|[-908.5784781618829,63.83075279044624]   |\n",
            "|[-861.5784494075679,40.57073549705321]   |\n",
            "|[-1404.559130649947,88.23218257736237]   |\n",
            "|[-1524.2324408687816,-3.2630573167779793]|\n",
            "|[-1734.385647746415,273.1626781511459]   |\n",
            "|[-1162.9140032230355,217.63481808344613] |\n",
            "|[-903.4301030498832,135.61517666084782]  |\n",
            "|[-1155.8759954206848,76.80889383742165]  |\n",
            "|[-1335.7294321308068,-2.4684005450356024]|\n",
            "|[-1547.2640922523087,3.805675972574325]  |\n",
            "|[-2714.9647651812156,-164.37610864258804]|\n",
            "|[-908.2502671870876,118.216420082231]    |\n",
            "+-----------------------------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1jgjL07hk2D9"
      },
      "source": [
        "#**Applynig KMeans on PCA Features:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8leQR4-atMAl"
      },
      "source": [
        "Now run K-means with the same parameters as above, but on the ```pcaFeatures``` produced by the PCA reduction you just executed.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U_snSSj5k2y5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "48b51b8f-66db-43f4-8787-886193ce8382"
      },
      "source": [
        "# applying KMeans on PCA extracted features\n",
        "pca_kmeans = kmeans.fit(pca_features)\n",
        "\n",
        "pca_preds = pca_kmeans.transform(pca_features)\n",
        "pca_centers = pca_kmeans.clusterCenters()\n",
        "print(\"Cluster Centers: \")\n",
        "for center in pca_centers:\n",
        "    print(center)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cluster Centers: \n",
            "[-793.36109344  105.48246852]\n",
            "[-2124.69173996   107.54465437]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QXZ6Ho5fk9c8"
      },
      "source": [
        "#**Computing Silhouette score and checking correctly classified samples:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v0jomSzGk8T9"
      },
      "source": [
        "Compute the Silhouette score, as well as the number of data points that have been clustered correctly."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sMUb_afmlIEW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bbd93af5-aa98-42f3-e793-c413f3e212f3"
      },
      "source": [
        "# Evaluate clustering by computing Silhouette score\n",
        "pca_eval = ClusteringEvaluator()\n",
        "\n",
        "pca_silhouette = pca_eval.evaluate(pca_preds)\n",
        "print(\"Silhouette with squared euclidean distance = \" + str(pca_silhouette))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Silhouette with squared euclidean distance = 0.8348610363444836\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Jkvu2_OmHhn8",
        "outputId": "07abde0e-3f0c-46a7-d7fe-e5444677dc86"
      },
      "source": [
        "pca_clusters = pca_preds.toPandas()\n",
        "pca_clusters.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>features</th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[-2260.0138862925405, -187.9603012226368]</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[-2368.993755782054, 121.58742425815508]</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[-2095.6652015478608, 145.11398565870087]</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[-692.6905100570508, 38.576922592081765]</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[-2030.2124927427062, 295.2979839927924]</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                    features  prediction\n",
              "0  [-2260.0138862925405, -187.9603012226368]           1\n",
              "1   [-2368.993755782054, 121.58742425815508]           1\n",
              "2  [-2095.6652015478608, 145.11398565870087]           1\n",
              "3   [-692.6905100570508, 38.576922592081765]           0\n",
              "4   [-2030.2124927427062, 295.2979839927924]           1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "45gXXrcrHQHK",
        "outputId": "eb383e29-d629-4f24-ced5-9e89f40ae8de"
      },
      "source": [
        "# checking if cluster identifier and labels are the same or not\n",
        "print(labels[0])\n",
        "pca_features.show(n =1,truncate=False)\n",
        "pca_preds.show(n=1,truncate=False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\n",
            "+----------------------------------------+\n",
            "|features                                |\n",
            "+----------------------------------------+\n",
            "|[-2260.0138862925405,-187.9603012226368]|\n",
            "+----------------------------------------+\n",
            "only showing top 1 row\n",
            "\n",
            "+----------------------------------------+----------+\n",
            "|features                                |prediction|\n",
            "+----------------------------------------+----------+\n",
            "|[-2260.0138862925405,-187.9603012226368]|1         |\n",
            "+----------------------------------------+----------+\n",
            "only showing top 1 row\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hTgugDC7HZgh",
        "outputId": "8ccf6f25-223c-4198-ed6f-03b28302bdc0"
      },
      "source": [
        "# predicted labels are inverse, checking correctly classified samples\n",
        "np.count_nonzero(labels!=pca_clusters.prediction)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "486"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yic6VhS7m4fd"
      },
      "source": [
        "#**Visualizing the clusters:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "98Jqf4hTnC4f"
      },
      "source": [
        "Visualize the dataset by plotting a scatter plot of the two PCA components. \n",
        "\n",
        "There are two plots:\n",
        "\n",
        "1) Highlighting the two **actual** labels in the dataset\n",
        "\n",
        "2) Highlighting the two **clusters** found by K-Means in the dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OFDnpa3b5fF_"
      },
      "source": [
        "# separating actual features for plotting\n",
        "pca_act_pd = pca_features.toPandas()\n",
        "\n",
        "x_act = np.array([i[0] for i in pca_act_pd.features])\n",
        "y_act = np.array([i[1] for i in pca_act_pd.features])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5d2G5Kn4UeLl"
      },
      "source": [
        "# separating predicted features for plotting\n",
        "x_pred = np.array([i[0] for i in pca_clusters.features])\n",
        "y_pred = np.array([i[1] for i in pca_clusters.features])\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2jfzWUdKnJUJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "fd2060ec-f0d2-45c9-8ab7-6abb9db7ef70"
      },
      "source": [
        "# Scatterplot actual clusters\n",
        "\n",
        "ldict = {0: 'red', 1: 'blue'}\n",
        "t_names = list(breast_cancer.target_names)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "for g in np.unique(labels):\n",
        "  ix = np.where(labels == g)\n",
        "  if g == 0:\n",
        "    lb = t_names[0]\n",
        "  else:\n",
        "    lb = t_names[1]\n",
        "  ax.scatter(x_act[ix], y_act[ix], c = ldict[g], label = lb, s = 30)\n",
        "ax.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "TVGgZPfDXr1E",
        "outputId": "e8b93e51-9f80-453e-e88a-23bbb62a5151"
      },
      "source": [
        "# Scatterplot predicted clusters via KMeans after PCA\n",
        "fig, ax = plt.subplots()\n",
        "for g in np.unique(pca_clusters.prediction):\n",
        "  ix = np.where(pca_clusters.prediction == g)\n",
        "  if g == 0:\n",
        "    lb = t_names[0]\n",
        "  else:\n",
        "    lb = t_names[1]\n",
        "  ax.scatter(x_pred[ix], y_pred[ix], c = ldict[g], label = lb, s = 30)\n",
        "ax.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QU43Wr9OnPeQ"
      },
      "source": [
        "#**Running KMeans on different values of K:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A23r3PUrm1iC"
      },
      "source": [
        "Repeat the KMeans process for K = 1 to 10. **Plotting** separately\n",
        "\n",
        "1) the Sihouette score for each K\n",
        "\n",
        "2) the within cluster sum of squares (WSS) for each K"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XdVGOBgSDuVg"
      },
      "source": [
        "#running KMeans for K = 2 to 10 (K=1 throws an error)\n",
        "cost = np.zeros(11)\n",
        "s_score = np.zeros(11)\n",
        "wsse_arr = np.zeros(11)\n",
        "\n",
        "for k in range(2,11):\n",
        "  k_kmeans = KMeans().setK(k).setSeed(1)\n",
        "  mod_kmeans = k_kmeans.fit(pca_features)\n",
        "  k_preds = mod_kmeans.transform(pca_features)\n",
        "  s_score[k] = evaluator.evaluate(k_preds)\n",
        "  wsse_arr[k] = mod_kmeans.summary.trainingCost"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "I7VlX61ZEAQu",
        "outputId": "f042411c-2e44-4a3b-d631-ffa2dde9d895"
      },
      "source": [
        "#plots for WSSE and Silhouette Score\n",
        "fig, (ax1, ax2) = plt.subplots(1,2, figsize = (17,6))\n",
        "ax1.plot(range(2,11),wsse_arr[2:11], label='WSSE', color = 'red')\n",
        "ax1.set_title(\"WSSE plot for KMeans\")\n",
        "ax1.set_xlabel('Number of Clusters')\n",
        "ax1.set_ylabel('WSSE')\n",
        "ax1.legend()\n",
        "ax2.plot(range(2,11),s_score[2:11], label='Silhouette Score', color = 'blue')\n",
        "ax2.set_title(\"Silhouette Score plot for KMeans\")\n",
        "ax2.set_xlabel('Number of Clusters')\n",
        "ax2.set_ylabel('Silhouette Score')\n",
        "ax2.legend()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f08159cbd68>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 152
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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6dNp0KABCxcupHnz5ixcuJDrrruOKVOm0Lp1a7755htSZ9L44x//yBFHHBHHZYmIiKTdxIkTee6555gyZQqNGzdmyZIl/PDDDwDcc889scRUlngfc8wxQEi8S0pK2H///Wt8jCeeeKLCcn9TrF27loKCuk+TVeMtIiL1wuDBg5k4cSIAM2fOpFevXrRs2ZLly5fz/fffM3v2bBo2bEjnzp1p0CAUb126dKFt27Z8+eWXtGzZkhYtWgDQokULDZImIiJ547PPPqNDhw40btwYgA4dOrDFFlsAsPvuu1NS8tMxsNetW8cpp5zCjjvuyNChQ/n222+BkCAPHDiQwsJCDjvsMJYvX/6T4yxZsoRu3bptOM4FF1xA//79KSws5K9//SsAF110EW+88QZFRUXceOONXHHFFTzxxBMUFRXxxBNPsGrVKk488UQGDBhA3759N7RUK39dFZX7AC+88AI77bQTffr0YciQIQAsW7aMQw89lMLCQgYOHMj06dMBuOqqqzjuuONIJBIcd9xxlJaW8qtf/Yr+/fvTv39/3nzzzU3+HajGW0RENt7vfgdTp9btMYuKIKUpeXlbbLEFBQUFzJ8/nwkTJjBo0CAWLVrExIkTad26Nb179+aYY44hmUzyxhtvMGTIEI499lj69u1Lnz596NSpE927d2fIkCEcfvjhHHTQQRuOfcEFF3DttdcCsOOOO/LII4/U7bWJiIhEYihCGTp0KNdccw3bbbcde+21F0cddRS77bZblcf88MMPeeyxx7j77rs58sgjefrppzn22GMZPnw4o0aNYrfdduOKK67g6quv/lFXsPLuvfdeWrduzaRJk/j+++9JJBIMHTqUG264gT/96U8899xzAHTq1ImSkhL+8pe/AHDJJZew5557ct9997FixQoGDBjAXnvt9aMa7SOPPLLCcr+0tJRTTjmF119/ne7du7Ns2TIArrzySvr27cs//vEPxo0bx/Dhw5ka/TJmzZrF+PHjadq0KccccwznnnsuyWSS+fPns88++zB79uwa/S4qk5uJ9+efw7vvwn77xR2JiIjUocGDBzNhwgQmTJjA73//exYtWsSECRNo3bo1iUSCLl26MGfOHMaNG8e4ceMYMmQIf/vb3xgyZAgvvPACkyZN4uWXX+bcc89l8uTJXHXVVYCamueyVavg9ddh551h883jjkZEJB4tWrRg8uTJvPHGG7zyyiscddRR3HDDDZxwwgmV7lM2/gnAzjvvzLx581i5ciUrVqzYkLQff/zx/PrXv67y3C+99BLTp0/nqaeeAmDlypV8+OGHbLbZZtXuN3bsWP70pz8BYWT4+fPns8MOO2zYprJyf/Xq1ey6664bWre1a9cOgPHjx/P0008DsOeee7J06dIN3dYOPvhgmjZtCsB///vfDf3eAb766iu++eabDS3naiM3E++LL4annoJFi6BVq7ijERHJPVU9Vk+jRCLBhAkTmDFjBr169WKrrbbipptuolWrVowYMQKAxo0bs99++7HffvvRqVMn/vGPfzBkyBDMjAEDBjBgwAD23ntvRowYsSHxltz1ySew//4wZgwMHx53NCIisRWhNGzYkN13353dd9+d3r17M2bMmCoT77Jm6WX7ljU1r0xBQQHr168H+NFUW+7OqFGj2GeffX60/auvvlrl8dydp59+mh49elS5XUXl/tChQ6vcpyKpNenr16/nrbfeokmTJht9nMrkZh/vM86Ab76Bhx6KOxIREalDgwcP5rnnnqNdu3Y0bNiQdu3asWLFCiZOnMjgwYOZMmUKixcvBkKhOX36dLp27crixYuZMmXKhuNMnTqVrl27xnUZkkE9e0KbNjB+fNyRiIjEZ86cOXz44YcbPte2HGzdujVt27bljTfeAOChhx7aUPvdrVs3Jk+eDLChdhvCLCR33nkna9asAeCDDz5g1apVtGzZkq+//nrDduU/77PPPowaNQp3B+Ddd9/9STyVlfsDBw7k9ddf3zDCeVlT81/+8pcbupO9+uqrdOjQgVYVVNQOHTqUUaNGbfg8tQ76BuRm4j1gAPTrB7ffDtEvSkRE6r/evXuzZMkSBg4c+KNlrVu3pkOHDnz55ZccdNBB9OrVi8LCQgoKCjjrrLNYs2YN559/Pttvv/2GQVtuvfXWDce44IILNkwnVlRUtGGkV6n/GjSAQYOgDsbFERGpt7755huOP/54evbsSWFhIbNmzap1q68xY8ZwwQUXUFhYyNSpU7niiisAOP/887nzzjvp27cvS5Ys2bD9ySefTM+ePdlpp53o1asXp512GmvXrqWwsJCGDRvSp08fbr75ZvbYYw9mzZq1oZy+/PLLWbNmDYWFhey4445cfvnlP4mlsnK/Y8eOjB49msMPP5w+ffpw1FFHAWEQ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\n",
            "text/plain": [
              "<Figure size 1224x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}